"""add FK from payment_logs to payments

Revision ID: 96343b2661dd
Revises: 2d57accc7939
Create Date: 2025-06-10 16:32:04.426989

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "96343b2661dd"
down_revision: Union[str, None] = "2d57accc7939"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "group_users", "email", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "groups", "group_name", existing_type=sa.VARCHAR(), nullable=True
    )
    op.drop_constraint(op.f("groups_group_name_key"), "groups", type_="unique")
    op.add_column(
        "payment_logs", sa.Column("payment_id", sa.Integer(), nullable=False)
    )
    op.alter_column(
        "payment_logs",
        "paid_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.drop_constraint(
        op.f("payment_logs_linked_service_id_fkey"),
        "payment_logs",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None, "payment_logs", "payments", ["payment_id"], ["id"]
    )
    op.drop_column("payment_logs", "linked_service_id")
    op.alter_column(
        "services", "name", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column(
        "users", "telegram_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_constraint(op.f("users_telegram_id_key"), "users", type_="unique")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(
        op.f("users_telegram_id_key"),
        "users",
        ["telegram_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "users", "telegram_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "services", "name", existing_type=sa.VARCHAR(), nullable=False
    )
    op.add_column(
        "payment_logs",
        sa.Column(
            "linked_service_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.create_foreign_key(
        op.f("payment_logs_linked_service_id_fkey"),
        "payment_logs",
        "linked_services",
        ["linked_service_id"],
        ["id"],
    )
    op.alter_column(
        "payment_logs",
        "paid_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.drop_column("payment_logs", "payment_id")
    op.create_unique_constraint(
        op.f("groups_group_name_key"),
        "groups",
        ["group_name"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "groups", "group_name", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "group_users", "email", existing_type=sa.VARCHAR(), nullable=True
    )
    # ### end Alembic commands ###
